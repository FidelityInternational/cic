#!/usr/bin/env bash

CURRENT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# shellcheck source=bin/support/sh/functions/cic.sh
source "${CURRENT_PATH}/support/sh/functions/cic.sh"

cic_command="$(bootstrap_cic_environment) /cic/bin/support/ruby/bin/cic"

options=""
subcommand=$1

if [ "${subcommand}" == "track" ]; then
    command="${cic_command} $*"
else

    if [ "${subcommand}" == "connect" ]; then
        options='-it'
    fi

    image=$2
    switch=$3
    container_command=$4

    command="${cic_command} ${subcommand} ${image} ${switch}"

    if [ "${container_command}" != "" ]; then
        command="${command} '${container_command}'"
    fi


    exercise_name="$(basename "$(pwd)")"

    volume_path="$(volume_path ansible)/${exercise_name}"
    copy_to_cic_volume "$(pwd)/." "${volume_path}"
fi

docker run ${options} -t \
    --volumes-from "$(cic_volumes_container)" \
    --network "$(cic_network)" \
    -w "${volume_path}" \
    -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v "$(tracks_path)":/cic/tracks \
    -v "$(exercises_path)":/cic/exercises \
    -v "${HOME}/.netrc":/root/.netrc \
    "$(cic_image)" \
    /bin/bash -c "${command}"

result=$?

if [ "${subcommand}" != "track" ]; then
    docker cp "$(cic_volumes_container):${volume_path}/." .
fi

exit $?