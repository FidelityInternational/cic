#!/usr/bin/env ruby

require 'thor'
require 'open3'
require_relative 'lib/commandline'
require_relative 'lib/docker'


class CIC < Thor

  desc 'connect', 'log in to a container and see what happened'
  option :command, desc: 'command to send to the container', required: false, default: nil
  def connect container_name
    command = "exec -it #{container_name} "
    command << (options[:command] || "bash -l")
    docker command
  end

  desc 'start', 'log in to a container and see what happened'
  option :image_tag, desc: 'the docker image'
  def start image_tag
    container_name=image_tag.gsub(':', '-')

    say ok "Starting container: #{container_name}"
    if container_exists?(container_name)
      start_container(container_name)
    else
      create_container(container_name, image_tag)
    end

  rescue SystemExit, Interrupt
    say ok "stopping container and removing container"
    docker "container rm -f #{container_id(container_name)}"
    exit
  end

  no_commands do
    include Commandline::Output
    include Docker
  end
end


CIC.start(ARGV)
