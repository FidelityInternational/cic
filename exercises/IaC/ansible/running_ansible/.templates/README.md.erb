# Run Ansible

## Introduction
> Ansible is an IT automation tool. It can configure systems, deploy software, and orchestrate more advanced IT tasks such as continuous deployments or zero downtime rolling updates.
[Ansible Website](https://docs.ansible.com/ansible/latest/index.html)

Ansible is a powerful tool that removes a number of the complexities of working with remote environments and provides a number of abstractions for expressing tasks that needed be executed and how and when they should occur.

## Exercise Learning Objectives
Ansible has lots of features that you will learn about in future exercises. The aim of this exercise is simply to:
 - give a simple introduction to one of Ansible's primary commands `ansible-playbook`.
 - get you to run some real Ansible on your own environment.
 - provide a gentle lead in to the rest of the exercises in this module.

# Useful terms:
- Inventory - these are the hosts that the Ansible will run against. Hosts can be provided in a number of different ways. For now it is not essential to know more than this but if you're interested in finding out more [click here](http://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html)
- Playbook - The term playbook comes from sports, a playbook contains the named plays or moves that a team might execute in a game.

## Exercise
**Note:** Before going any further do the following:
- `cd YOUR_CLONE_OF_THIS REPO`
- `<%= cd('./exercises/IaC/ansible/running_ansible')%>`

### ansible-playbook
The `ansible-playbook` command is used to execute a group of plays against servers identified in the supplied inventory.

To see what this command can do run: `<%= command('ansible-playbook --help') %>`. Along with documentation on a large number of options, the following top level documentation should be displayed:
```
<%= last_command_output.lines[0..2].join.chomp %>
```
At the simplest level, all that the `ansible-playbook` command requires is to be pointed at a playbook. One has been supplied for you in `./ansible/apache.yml`:

```YAML
 <%= command_output('cat ansible/apache.yml') %>
```

To use it run:
`<%= command('ansible-playbook ansible/apache.yml') %>`

You should see the following output:
```
<%= last_command_output %>
```

> So what just happened?

Well you ran your very first ansible playbook!

> What did it do?

Well the first thing it did was to look at the `./ansible/apache.yml` and found the plays defined in there. In the [writing a playbook exercise]() you'll look in detail at the what the entries in this file actually do. For now, feel free to take a look at this file, its very small and pretty clear about what it's doing.

The terminal output shows us that:
 - It has detected a playbook containing a play called 'Setup a webserver'.
 <% ansible_output = last_command_output.to_ansible_output %>
```
 <%= ansible_output.play %>
```
 - Has detected what hosts (inventory) this playbook is to run against.
 ```
 <%= ansible_output.tasks[0] %>
```
 - Has installed apache2
```
 <%= ansible_output.tasks[1] %>
```
 - Has started apache2
```
<%= ansible_output.tasks[2] %>
```
 - Given us a summary of the number of actions that is has taken.
```
 <%= ansible_output.play_recap %>
```

> What about the last line of output?
```
<%= last_command_output.lines.last %>
```

This line wasn't outputed by Ansible itself, but actually the courseware supporting this tutorial. This line gives you the command that you can use to start to the temporary container that was created on your behalf for the Ansible to run against.

### Validating that everything has worked
Start the container that was built for ansible-playbook by running the command that was outputted on your console, e.g: `<%= command(last_command_output.to_cic_output.cic_start_command) %>`

<% cic_output = last_command_output.to_cic_output %>
<% cic_stop_command = cic_output.cic_stop_command %>
<% cic_connect_command = cic_output.cic_connect_command %>
<% container_id = cic_output.container_id %>

This outputs the following:
```
<%= last_command_output %>
```

The container built out for ansible-playbook is now up and running and ready to be looked at.

**Note:** to stop the container simply run `<%= after_all(cic_stop_command) %>`

#### Testing via automation
Automation must be trustworthy if it is to be relied upon. Although we trust that Ansible attempted to do all the things that we asked it to, that doesn't mean that we haven't made a mistake and told it to do the wrong things!

For this reason we always want to be able to run acceptance test(s) to confirm that the delivered system is configured in the way that we were expecting it to be.

Having tests that can be run on demand provides great power. These tests can be used to verify that last minute changes don't break the intended functionality and can even be used post deployment to verify that a system is configured correctly.

This exercise contains a test called <%= path("./tests/apache_ansible_test.py") %> written in python using the pytest and testinfra APIs. This contains the following

```python
<%= command_output('cat ./tests/apache_ansible_test.py') %>
```

To run this script, execute the following command: `<%= command("pytest --ansible-host #{container_id}") %>`

This should output the following:
```
<%= anonymise(last_command_output)%>
```

In just a second or so the test has validated that:
- the correct package was installed.
- apache2 daemon had been started
- the apache2 process is listening on port 80

Now that the acceptance tests are passing we can be very confident that the system has been configured as required.

#### Manual inspection
Using the actual container name given from the `cic start` command run: `<%=command(cic_connect_command) %>`

You will now be in a bash shell on the container itself. From here run: `curl localhost:80` to see that apache is alive and well.

## Summary
Ansible is a great tool for configuring infrastructure. Baked in to its philosophy is that all configuration is code and so can and should be version controlled. In the other exercises in this module you will learn how to write and test your own playbooks as well as learn about Ansible's other powerful features.
