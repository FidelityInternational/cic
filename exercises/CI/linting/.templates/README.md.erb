<% linter_command = 'pylint' %>
### Introduction
When thinking of the ways it's possible to ensure the quality of code, the most obvious method that springs to mind are automated tests. Automated tests check that code functions as required. However, test automation is not the only metric that can be used to determine the quality of code.

Lint is the bits of fluff on your clothes when you was and dry them. Lint is also the name given to code smells. I.e. suspicious code, that is seemingly non portable or a potential source of bugs.

Linting, isn't a new practice. Linting first started in [1978 at Bell Labs](https://en.wikipedia.org/wiki/Lint_(software)) and was a technique used to inspect C code for portability issues. Nowadays there are linters to look for all sorts of different code smells, from those that affect style and readility to those that warn of poor code coverage and potential vulnerabilities.

### Learning Objectives
- Discover the value of Linting

The intention of this exercise is not to exhaustively teach how to use a particular linter for a specific language, rather to introduce the value of using linters. This exercise does use <%= linter_command %> however if Python is not a language you know, fear not very little to no knowledge of python is required and you will get still get all of the value from completing this exercise. If you are interested in <% linter_command %> specifically and want to do more extensive reading then check out the[project home page](https://www.pylint.org/) for more information.

## Required prequisite knowledge
This exercise assumes that you have basic knowledge of at least one programming. Although not essential,knowledge of an object oriented language might be useful.

### Tutorial
**Note:** Before going any further do the following:
- `cd YOUR_CLONE_OF_THIS REPO`
- `source ./bin/env`
- `cd <%=env('exercise_path') %>`

### Installing a Linter
All modern Languages have Linters. If your programming in Ruby you might use [Simplcov](https://github.com/colszowka/simplecov). If your using Python then, amongst otheres, there's [Pylint](https://www.pylint.org/). The means of installing your chosen Linter will be specific to the Linter. In the case of Pylint and Simplecov both can be installed using their language's respective package managers (pip and gem).

### Linting your code
For this tutorial we'll be using <%= linter_command %> and have provided it as part of the CIC courseware.

Run `<%= command(linter_command, fail_on_error: false) %>` to see that the command is available.
```
<%= last_command_output.lines[0..8].join %>
... lots more lines of help ...
```

<%= linter_command.capitalize %> needs some python code to look at so change directory to `<%= cd('resources') %>` and run `<%= command('ls src') %>` and you'll see there there is some code to run `<%= linter_command %>` against.
```
<%= last_command_output %>
```

<% source_code_file = 'src/calculator.py' %>
Take a look at <%= source_code_file %>
```PYTHON
<%= command_output("cat #{source_code_file}") %>
```

Looking at this code, it doesn't look to bad... and indeed it isn't. The tests are passing, functionally, this code is doing what it is supposed to.

It's not always easy to see where small errors and inconsitencies are in code. It's not what we as people are best at. Having a team mate review your code to point out missing white space or comments can also feel a bit personal and overly persona. This is where Linters can step in. Linters can remove the time required and critical edge out of the process of reviewing code. Linters can also find potential bugs in waiting that a functional test suite has not highlighted.

run: `<%= command("#{linter_command} src", fail_on_error: false) %>` to see what <% linter_command %> thinks of our code.
```
<%= last_command_output %>
```

Sure enough there are a few issues. Some linters provide online documentation as to what these errors mean and examples of how they can be mitigated. Unfortunately it does not appear as though an up to date version of [this resource](http://pylint-messages.wikidot.com/all-codes) currently exists for <% linter_command %>, however it's still very much worth taking a look at.

#### Things can be subjective
Linters are by their very definition opinionated and you might not always agree with the points that your linter raises. For example [C0111 - Missing method docstring](http://pylint-messages.wikidot.com/messages:c0111) is raised every time <% linter_command %> sees that comments detailing a method's specification are missing. There is a school of thought that says that code itself should be self documenting. I.e it should be readable and that you should be able to tell what it does by reading it. Therefore some teams decide, to avoid ambiguity, that public APIs consumed by third parties should be documented but decide not to extensively document private APIs. Instead they choose to rely on the readability of the code, and the accompanying tests, to document what it does.

Linters whilst opinionated are flexible too and allow themselves to be configured to the needs of their consumers. Therefore they can be tuned to change their sensitivity to certain issues or to disable particular checks altogether.

### Now it's your turn
fix the things that the linter has brought up and see if you can get <%= linter_command %> report the following :)

```
<%= command_output("#{linter_command} src/operations.py") %>
```

Don't forget to make sure that the tests are still passing after making your changes. Run <%= command('pytest') %> to execute them.
```
<%= last_command_output %>
```